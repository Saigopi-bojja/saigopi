 'Start of IR 123456
 Public Function VALIDATEACTNUMBER(ByVal xmlCurrentInDoc As FlowDistributorTypes.CFNSComponentDocument) As FlowDistributorTypes.CFNSComponentDocument
     Dim ACCOUNTNOTRACE As String
     Dim ACCOUNTNOLogsPath As String
     Dim BranchTrace As String
     Dim TELLERNO As String
     Dim BRANCHNO As String
     Dim ACCOUNTNOResponseDataPlain As Object
     Dim RESPONSE_STATUS As String
     Dim xmlReturnDoc As FlowDistributorTypes.CFNSComponentDocument = xmlCurrentInDoc.createReturnDocument
     Dim sTXSection As String = xmlCurrentInDoc.getMethodParameterText("TXSection", True)
     Dim TranNo As String = Sanitizer.GetSafeHtmlFragment(xmlCurrentInDoc.body.SelectSingleNode("//screenData/TRAN_NO").InnerText)
     'DEV COMMENT: ACCOUNT IDENTIFIER IS USED FOR THE MAPPING TO THE PARENT SCREEN DATA.
     ' Dim tinIdentifier As String = Sanitizer.GetSafeHtmlFragment(xmlCurrentInDoc.body.SelectSingleNode("//screenData/TIN_IDENTIFIER").InnerText)
     'DEV COMMENT: ACCOUNT IDENTIFIER IS USED FOR THE MAPPING TO THE PARENT SCREEN DATA.
     Dim RRN As String
     Dim encoded As New System.Text.UTF8Encoding()
     Dim xmlTXSectionNode As Xml.XmlNode = xmlReturnDoc.appendBodySubDocument(sTXSection, True)
     Dim ser As New JavaScriptSerializer()
     Try

         Dim GEN6_XML As New System.Xml.XmlDocument()
         Dim aes As New TCSSIEncryptor.SIEncryptor.TCSSIEncryptor()
         Dim goodSettings As New XmlReaderSettings
         goodSettings.DtdProcessing = DtdProcessing.Ignore
         goodSettings.XmlResolver = Nothing
         goodSettings.ValidationType = ValidationType.Schema
         goodSettings.Schemas = New XmlSchemaSet()
         goodSettings.MaxCharactersFromEntities = 1024
         goodSettings.IgnoreComments = True

         Dim goodxmlread As XmlReader = XmlReader.Create(System.AppDomain.CurrentDomain.BaseDirectory & "\xml\Settings\ACT_Config.xml", goodSettings)
         GEN6_XML.Load(goodxmlread)
         goodxmlread.Close()

         TELLERNO = xmlCurrentInDoc.OwnerDocument.SelectSingleNode("//userInfo/TellerNo").InnerXml.ToString
         BRANCHNO = xmlCurrentInDoc.OwnerDocument.SelectSingleNode("//userInfo/BranchNo").InnerXml.ToString
         'DEV Comment: 3 Parameters will be sent to microservices i.e a.Branch Number b.Teller Number c.Account Number
         Dim ACCOUNT_NO, BRANCH_NO, TELLER_NO As String
         ACCOUNT_NO = Sanitizer.GetSafeHtmlFragment(xmlCurrentInDoc.body.SelectSingleNode("//screenData/ACCOUNT_NO").InnerText)
         BRANCH_NO = Sanitizer.GetSafeHtmlFragment(xmlCurrentInDoc.body.SelectSingleNode("//screenData/BRANCH_NO").InnerText)
         TELLER_NO = Sanitizer.GetSafeHtmlFragment(xmlCurrentInDoc.body.SelectSingleNode("//screenData/TELLER_NO").InnerText)
         Dim SOURCE_ID_ACTNO As String = GEN6_XML.SelectSingleNode("//SOURCE_ID").InnerText
         Dim REQUEST_REFERENCE_NUMBER_VAL As String = aes.GenerateRefrenceNumberYY(TELLERNO, "SBI", SOURCE_ID_ACTNO)
         RRN = REQUEST_REFERENCE_NUMBER_VAL
         Dim ACTPATH As String = GEN6_XML.SelectSingleNode("//URL").InnerText
         Dim KEYWORDVAL_ACT As String = GEN6_XML.SelectSingleNode("//KEYWORDVAL").InnerText
         ACTNOTRACE = GEN6_XML.SelectSingleNode("//TRACE").InnerText
         BranchTrace = GEN6_XML.SelectSingleNode("//BRANCH_TRACE").InnerText
         BranchTrace = BranchTrace.PadLeft(5, "0"c)
         ACTNOLogsPath = System.AppDomain.CurrentDomain.BaseDirectory & "//xml//logs/ACTNO_LOGS"
         LogWriterForACTNO("----------Calling ACCOUNT NUMBER VALIDATION SERVICE at " + DateTime.Now.ToString("hh:mm:ss") + " ----------", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)


         Dim restUrlresponce As New Uri(ACTPATH)
         Dim request As HttpWebRequest = DirectCast(HttpWebRequest.Create(restUrlresponce), HttpWebRequest)
         Dim mem As New MemoryStream
         Dim myheaders As WebHeaderCollection

         LogWriterForACTNO("ACCOUNT NUMBER VALIDATION SERVICE URL = " + ACTPATH + " ", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)


         Dim AccountNoPlainPayLoadReqObject As New PLAINTINREQUEST With {
             .REQUEST_REFERENCE_NUMBER = REQUEST_REFERENCE_NUMBER_VAL,
             .SOURCE_ID = SOURCE_ID_ACTNO,
             .BRANCH_NO = BRANCH_NO,
             .TELLER_NO = TELLER_NO,
             .ACCOUNT_NUMBER = ACCOUNT_NO
         }
         Dim ACCOUNTNOdata As String = ser.Serialize(AccountNoPlainPayLoadReqObject)

         LogWriterForTIN("Plain Json Request = " + ACCOUNTNOdata + " ", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)


         Dim AccountNoPayloadData As ArrayList = aes.GenerateEncryptedKeysForOAEPForMicroservices(ACCOUNTNOdata, "PayloadCertificateMicroservices")

         Dim TANZUDataRet As Byte() = encoded.GetBytes(AccountNoPayloadData(0))
         Dim RSAkey As String = AccountNoPayloadData(1)
         Dim AccesToken1 As Byte() = encoded.GetBytes(AccountNoPayloadData(2))


         LogWriterForACTNO("Payload Request Data = " + AccountNoPayloadData(0), TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)
         LogWriterForACTNO("Access Token before encryption = " + AccountNoPayloadData(2), TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)
         LogWriterForACTNO("Access Token after encryption= " + RSAkey, TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)


         Dim SignDatastr As String = aes.SignDataEKYC(ACCOUNTNOdata, KEYWORDVAL_ACT, "CBSPrivateKey")

         LogWriterForACTNO("DIGI SIGN Data = " + SignDatastr + " ", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)


         request.Method = "POST"
         myheaders = request.Headers
         myheaders.Add("AccessToken", RSAkey)
         myheaders.Add("Teller-No", TELLERNO.PadLeft(16, "0"))
         myheaders.Add("Branch-No", BRANCHNO.PadLeft(5, "0"))
         request.ContentType = "application/json"

         Dim aCCOUNTNoEnqpayLoadReqObject As New ENCRYPT_REQUEST With {
             .DIGI_SIGN = SignDatastr,
             .REQUEST_REFERENCE_NUMBER = REQUEST_REFERENCE_NUMBER_VAL,
             .REQUEST = AccountNoPayloadData(0)
         }
         Dim ACTNOEnqpayLoadReq As String = ser.Serialize(aCCOUNTNoEnqpayLoadReqObject)

         LogWriterForACTNO("TANZU PayLoad Request = " + ACTNOEnqpayLoadReq + " ", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)


         Dim bytes As Byte() = encoded.GetBytes(ACTNOEnqpayLoadReq)
         request.ContentLength = bytes.Length
         ServicePointManager.SecurityProtocol = DirectCast(3072, SecurityProtocolType) Or DirectCast(768, SecurityProtocolType) Or DirectCast(192, SecurityProtocolType)

         Using requestStream As Stream = request.GetRequestStream()
             requestStream.Write(bytes, 0, bytes.Length)
         End Using

         Try
             Dim ACTNO_respond As WebResponse = request.GetResponse()
             Dim ACTNO_respondstream As Stream = ACTNO_respond.GetResponseStream
             Dim ACTNO_respondstreamreader As New StreamReader(ACTNO_respondstream)

             Dim ACTNO_OUTPUT As String = CheckForDenialOfService(ACTNO_respondstreamreader).ToString().Trim()
             LogWriterForACTNO("ACCOUNT NUMBER VALIDATION SERVICE Response Output = " + ACTNO_OUTPUT + " ", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)
             Dim ACTNOResponseData As Object = ser.Deserialize(ACTNO_OUTPUT, GetType(ResponseforACTNO_DIGISIGN))

             LogWriterForACTNO("ACTNOResponseData = " + ACTNOResponseData.RESPONSE.ToString() + " ", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)

             Dim RetResponse As Object
             Dim RetDIGI_SIGN As Object
             Dim RetREQUEST_REFERENCE_NUMBER As Object

             RetResponse = ACTNOResponseData.RESPONSE
             RetDIGI_SIGN = ACTNOResponseData.DIGI_SIGN
             RetREQUEST_REFERENCE_NUMBER = ACTNOResponseData.REQUEST_REFERENCE_NUMBER

             Dim DecryptResponseVal As String = aes.AesDecryptWithGCM(RetResponse, AccountNoPayloadData(2))

             LogWriterForACTNO("Decrypted Response Value= " + DecryptResponseVal + " ", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)

             Dim base64EncodedBytes As Byte() = System.Convert.FromBase64String(RetDIGI_SIGN)
             Dim SignDataVerify As Boolean = aes.VerifySignDatEKYC(DecryptResponseVal, base64EncodedBytes, "PayloadCertificateMicroservices")
             LogWriterForACTNO("Digital Signed Data Verified = " + SignDataVerify.ToString() + " ", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)

             ACTNOResponseDataPlain = ser.Deserialize(DecryptResponseVal, GetType(ACTNO_RESPONSEMAIN))
             RESPONSE_STATUS = ACTNOResponseDataPlain.RESPONSE_STATUS
             Dim ErrorDescription As String = ACTNOResponseDataPlain.ERROR_CODE + ": " + ACTNOResponseDataPlain.ERROR_DESCRIPTION
             Dim ErrorCode As String = ACTNOResponseDataPlain.ERROR_CODE
             Dim SuccessMessage As String = ACTNOResponseDataPlain.ERROR_DESCRIPTION

             If (RESPONSE_STATUS).Trim = "0" And (SignDataVerify.ToString().ToUpper).Trim = "TRUE" Then

                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ERROR_CODE", ErrorCode)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ErrorMessage", ErrorDescription)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_RESPONSE" , "S")
                 'xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ERROR_CODE", ErrorCode)
                 'xmlReturnDoc'.setBodySubDocumentNodeValue("screenData", "ErrorMessage", ErrorDescription)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_ErrorMessage", ErrorDescription)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_ErrorCode", ErrorCode)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "RESPONSE_STATUS", RESPONSE_STATUS)
                 'xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "RESPONSE_STATUS", RESPONSE_STATUS)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "TranNo", TranNo)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "SuccessMessage", SuccessMessage)
                 LogWriterForACTNO("Error Description = " + ErrorDescription, TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)
                 xmlReturnDoc.methodResult = "True"

             ElseIf (RESPONSE_STATUS).Trim = "1" Then

                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_RESPONSE", "F")
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ERROR_CODE", ErrorCode)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ErrorMessage", ErrorDescription)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_ErrorMessage", ErrorDescription)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_ErrorCode", ErrorCode)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "TranNo", TranNo)
                 'xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "RESPONSE_STATUS", RESPONSE_STATUS)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "RESPONSE_STATUS", RESPONSE_STATUS)
                 LogWriterForACTNO("Error Description = " + ErrorDescription, TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)
                 xmlReturnDoc.methodResult = "FALSE"

             ElseIf (SignDataVerify.ToString().ToUpper).Trim = "FALSE" Then
                 ErrorDescription = "Digital Signature Verification Failed."
                 xmlReturnDoc.methodResult = "FALSE"
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_RESPONSE", "R")
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ErrorMessage", ErrorDescription)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_ErrorMessage", ErrorDescription)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "TranNo", TranNo)
                 LogWriterForACTNO("Error Description = " + ErrorDescription, TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)
             Else
                 xmlReturnDoc.methodResult = "ERROR"
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_RESPONSE", "R")
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ErrorMessage", ErrorDescription)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_ErrorMessage", ErrorDescription)
                 xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "TranNo", TranNo)
                 LogWriterForACTNO("Error Description = " + ErrorDescription, TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)
             End If

         Catch Ex As Exception
             xmlReturnDoc.methodResult = "ERROR"
             xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_RESPONSE", "R")
             xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ErrorMessage", Ex.Message.ToString())
             xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_ErrorMessage", Ex.Message.ToString())
             xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "TranNo", TranNo)
             LogWriterForACTNO("First Catch Block = " + Ex.Message.ToString() + " ", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)
         End Try

     Catch ex As Exception
         xmlReturnDoc.methodResult = "ERROR"
         xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_RESPONSE", "R")
         xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ACT_ErrorMessage", ex.Message.ToString())
         xmlReturnDoc.setBodySubDocumentNodeValue("screenData", "ErrorMessage", ex.Message.ToString())
         LogWriterForACTNO("Main Catch Block = " + ex.Message.ToString(), TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)

     End Try
     LogWriterForACTNO("---------- End ACCOUNT NUMBER VALIDATION SERVICE at " + DateTime.Now.ToString("hh:mm:ss") + " ----------", TELLERNO, BRANCHNO, ACTNOTRACE, BranchTrace, ACTNOLogsPath)
     xmlReturnDoc.appendBodySubDocument(xmlTXSectionNode)
     Return xmlReturnDoc
 End Function
